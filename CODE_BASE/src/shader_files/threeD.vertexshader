#version 430 core
//layout(location = 0) in vec3 position;

//layout(location = 1) in vec3 nor;
//layout(location = 2) in vec2 uv;

//layout(location = 0) uniform mat4 model;
//layout(location = 1) uniform mat4 view_projection;

//out vec3 fragment_color;
//out vec2 uv_location;

//void main(){
	//uv_location = uv;
    //gl_Position = view_projection * vec4(position, 1.f);
	//gl_Position =  view_projection * model * vec4(position, 1.f);
	//fragment_color = vec3(1.f, 0, 0); //color;//vec3(1.f, 1.f, 1.f);//vec3(abs(gl_Position.x), abs(gl_Position.y), 1.f);//position; //color;

//    gl_Position.xyz = position;
//    gl_Position.w = 1.0;
//}

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;

void main(){

    gl_Position.xyz = vertexPosition_modelspace;
    gl_Position.w = 1.0;

}

